---
// src/components/ParticipantForm.astro
import FormInput from "./FormInput.astro";
import Modal from "./Modal.astro";
import Confetti from "./Confetti.astro";
---

<!-- Form Card -->
<div
  class="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden"
>
  <div class="p-8">
    <form id="participant-form" class="space-y-6" novalidate>
      <!-- Email Field -->
      <FormInput
        id="email"
        name="email"
        type="email"
        label="Email"
        placeholder="tu@email.com"
        required={true}
        icon={`<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
        </svg>`}
      />

      <!-- Full Name Field -->
      <FormInput
        id="fullName"
        name="fullName"
        type="text"
        label="Nombre Completo"
        placeholder="Nombre y Apellidos"
        required={true}
        icon={`<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
        </svg>`}
      />

      <!-- Phone Field -->
      <FormInput
        id="phone"
        name="phone"
        type="tel"
        label="Teléfono"
        placeholder="958920823"
        required={false}
        icon={`<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
        </svg>`}
      />

      <!-- Submit Button -->
      <button
        type="submit"
        id="submit-btn"
        class="w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold py-3 px-6 rounded-xl hover:from-blue-600 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transform transition-all duration-200 hover:scale-[1.02] active:scale-[0.98] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
        data-submit-button
      >
        <span id="submit-text">Registrarse</span>
        <svg
          id="loading-spinner"
          class="hidden animate-spin -ml-1 mr-3 h-5 w-5 text-white inline"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            class="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="4"></circle>
          <path
            class="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          ></path>
        </svg>
      </button>
    </form>
  </div>

  <!-- Form Footer -->
  <div class="px-8 py-4 bg-gray-50 border-t border-gray-100">
    <p class="text-xs text-gray-500 text-center">
      * Campos obligatorios. Al registrarte aceptas nuestros términos y
      condiciones.
    </p>
  </div>
</div>

<!-- Modals -->
<Modal
  id="success-modal"
  type="success"
  title="¡Registro Exitoso!"
  message="Te has registrado correctamente. ¡Bienvenido a nuestra comunidad!"
  buttonText="Continuar"
/>

<Modal
  id="error-modal"
  type="error"
  title="Error en el Registro"
  message="Hubo un problema al procesar tu registro. Por favor, inténtalo de nuevo."
  buttonText="Cerrar"
/>

<!-- Confetti -->
<Confetti />

<script>
  import type { ParticipantData, FormErrors } from "../types/participant";

  // Declare types for window objects
  interface ConfettiAnimationClass {
    new (containerId?: string): {
      trigger(): void;
    };
  }

  declare global {
    interface Window {
      ConfettiAnimation?: ConfettiAnimationClass;
    }
  }

  class ParticipantFormManager {
    private form: HTMLFormElement;
    private submitButton: HTMLButtonElement;
    private submitText: HTMLElement;
    private loadingSpinner: HTMLElement;
    private confetti: { trigger(): void } | null = null;

    constructor() {
      this.form = document.getElementById(
        "participant-form"
      ) as HTMLFormElement;
      this.submitButton = document.getElementById(
        "submit-btn"
      ) as HTMLButtonElement;
      this.submitText = document.getElementById("submit-text") as HTMLElement;
      this.loadingSpinner = document.getElementById(
        "loading-spinner"
      ) as HTMLElement;

      if (window.ConfettiAnimation) {
        this.confetti = new window.ConfettiAnimation();
      }

      this.init();
    }

    private init(): void {
      this.form.addEventListener("submit", this.handleSubmit.bind(this));
      this.setupRealtimeValidation();
      this.setupModalHandlers();
    }

    private async handleSubmit(event: Event): Promise<void> {
      event.preventDefault();

      const formData = this.getFormData();
      this.clearErrors();

      // Validate form
      const errors = this.validateForm(formData);
      if (Object.keys(errors).length > 0) {
        this.showErrors(errors);
        return;
      }

      // Submit form
      this.setSubmittingState(true);

      try {
        // In a real implementation, you'd import the service properly
        // For now, we'll simulate the API call
        await this.submitToAPI(formData);

        // Success
        this.showSuccess();
        this.form.reset();
      } catch (error) {
        this.showError(
          error instanceof Error ? error.message : "Error desconocido"
        );
      } finally {
        this.setSubmittingState(false);
      }
    }

    private getFormData(): ParticipantData {
      const formData = new FormData(this.form);
      return {
        email: (formData.get("email") as string)?.trim() || "",
        fullName: (formData.get("fullName") as string)?.trim() || "",
        phone: (formData.get("phone") as string)?.trim() || undefined,
      };
    }

    private validateForm(data: ParticipantData): FormErrors {
      const errors: FormErrors = {};

      // Email validation
      if (!data.email) {
        errors.email = "El email es obligatorio";
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
        errors.email = "Por favor ingresa un email válido";
      }

      // Full name validation
      if (!data.fullName) {
        errors.fullName = "El nombre completo es obligatorio";
      } else if (data.fullName.length < 2) {
        errors.fullName = "El nombre debe tener al menos 2 caracteres";
      }

      // Phone validation (optional)
      if (data.phone && !/^\+?[\d\s\-\(\)]{9,15}$/.test(data.phone)) {
        errors.phone = "Por favor ingresa un teléfono válido";
      }

      return errors;
    }

    private showErrors(errors: FormErrors): void {
      Object.entries(errors).forEach(([field, message]) => {
        const errorElement = document.getElementById(`${field}-error`);
        const inputElement = document.getElementById(field) as HTMLInputElement;

        if (errorElement && inputElement) {
          errorElement.textContent = message;
          errorElement.classList.remove("hidden");
          inputElement.classList.add("border-red-500", "focus:ring-red-500");
          inputElement.classList.remove(
            "border-gray-300",
            "focus:ring-blue-500"
          );
        }
      });
    }

    private clearErrors(): void {
      const errorElements = document.querySelectorAll('[id$="-error"]');
      const inputElements = document.querySelectorAll(
        "input"
      ) as NodeListOf<HTMLInputElement>;

      errorElements.forEach((el) => {
        el.classList.add("hidden");
        el.textContent = "";
      });

      inputElements.forEach((input) => {
        input.classList.remove("border-red-500", "focus:ring-red-500");
        input.classList.add("border-gray-300", "focus:ring-blue-500");
      });
    }

    private async submitToAPI(data: ParticipantData): Promise<void> {
      const response = await fetch("http://localhost:8000/api/participants", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          errorData.message ||
            `Error ${response.status}: ${response.statusText}`
        );
      }
    }

    private setSubmittingState(isSubmitting: boolean): void {
      this.submitButton.disabled = isSubmitting;

      if (isSubmitting) {
        this.submitText.textContent = "Registrando...";
        this.loadingSpinner.classList.remove("hidden");
      } else {
        this.submitText.textContent = "Registrarse";
        this.loadingSpinner.classList.add("hidden");
      }
    }

    private showSuccess(): void {
      if (this.confetti) {
        this.confetti.trigger();
      }

      setTimeout(() => {
        this.showModal("success-modal");
      }, 500);
    }

    private showError(message: string): void {
      const errorMessageEl = document.getElementById("error-modal-message");
      if (errorMessageEl) {
        errorMessageEl.textContent = message;
      }
      this.showModal("error-modal");
    }

    private showModal(modalId: string): void {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove("hidden");
        modal.classList.add("flex");
        document.body.style.overflow = "hidden";
      }
    }

    private hideModal(modalId: string): void {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add("hidden");
        modal.classList.remove("flex");
        document.body.style.overflow = "auto";
      }
    }

    private setupModalHandlers(): void {
      // Close button handlers
      document.querySelectorAll("[data-close-modal]").forEach((button) => {
        button.addEventListener("click", (e) => {
          const modalId = (e.target as HTMLElement).getAttribute(
            "data-close-modal"
          );
          if (modalId) {
            this.hideModal(modalId);
          }
        });
      });

      // Click outside to close
      document.querySelectorAll("[data-modal]").forEach((modal) => {
        modal.addEventListener("click", (e) => {
          if (e.target === e.currentTarget) {
            this.hideModal(modal.id);
          }
        });
      });
    }

    private setupRealtimeValidation(): void {
      const emailInput = document.getElementById("email") as HTMLInputElement;
      const fullNameInput = document.getElementById(
        "fullName"
      ) as HTMLInputElement;
      const phoneInput = document.getElementById("phone") as HTMLInputElement;

      if (emailInput) {
        emailInput.addEventListener("input", () => {
          this.validateFieldRealtime(emailInput, /^[^\s@]+@[^\s@]+\.[^\s@]+$/);
        });
      }

      if (fullNameInput) {
        fullNameInput.addEventListener("input", () => {
          this.validateFieldRealtime(fullNameInput, /.{2,}/);
        });
      }

      if (phoneInput) {
        phoneInput.addEventListener("input", () => {
          if (phoneInput.value.trim()) {
            this.validateFieldRealtime(phoneInput, /^\+?[\d\s\-\(\)]{9,15}$/);
          } else {
            this.resetFieldValidation(phoneInput);
          }
        });
      }
    }

    private validateFieldRealtime(
      input: HTMLInputElement,
      pattern: RegExp
    ): void {
      if (input.value && !pattern.test(input.value)) {
        input.classList.add("border-red-500");
        input.classList.remove("border-gray-300", "border-green-500");
      } else if (input.value) {
        input.classList.add("border-green-500");
        input.classList.remove("border-gray-300", "border-red-500");
      } else {
        this.resetFieldValidation(input);
      }
    }

    private resetFieldValidation(input: HTMLInputElement): void {
      input.classList.remove("border-red-500", "border-green-500");
      input.classList.add("border-gray-300");
    }
  }

  // Initialize form when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    new ParticipantFormManager();
  });
</script>

---
// src/components/ParticipantForm.astro
import FormInput from "./FormInput.astro";
import Modal from "./Modal.astro";
import Confetti from "./Confetti.astro";
---

<!-- Form Card -->
<div
  class="bg-slate-800/80 backdrop-blur-xl rounded-3xl shadow-2xl border border-emerald-500/30 overflow-hidden shadow-emerald-500/10"
>
  <div
    class="bg-gradient-to-r from-emerald-500 to-green-400 text-white p-8 text-center relative overflow-hidden"
  >
    <!-- Background pattern -->
    <div class="absolute inset-0 opacity-20">
      <div
        class="absolute top-0 left-0 w-32 h-32 bg-white/10 rounded-full -translate-x-16 -translate-y-16"
      >
      </div>
      <div
        class="absolute bottom-0 right-0 w-24 h-24 bg-white/10 rounded-full translate-x-12 translate-y-12"
      >
      </div>
    </div>

    <div class="relative z-10">
      <h3
        class="text-3xl font-bold mb-3 flex items-center justify-center gap-3"
      >
        <span class="text-4xl">üé≤</span>
        ¬°Participa Ahora!
      </h3>
      <p class="text-emerald-100 text-lg">
        Completa tus datos y entra autom√°ticamente al sorteo
      </p>
    </div>
  </div>

  <div class="p-8">
    <form id="participant-form" class="space-y-6" novalidate>
      <!-- Email Field -->
      <FormInput
        id="email"
        name="email"
        type="email"
        label="Email"
        placeholder="tu@email.com"
        required={true}
        icon={`<svg class="h-5 w-5 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
        </svg>`}
      />

      <!-- Full Name Field -->
      <FormInput
        id="fullName"
        name="fullName"
        type="text"
        label="Nombre Completo"
        placeholder="Nombre y Apellidos"
        required={true}
        icon={`<svg class="h-5 w-5 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
        </svg>`}
      />

      <!-- Phone Field -->
      <FormInput
        id="phone"
        name="phone"
        type="tel"
        label="Tel√©fono"
        placeholder="+51 987 654 321"
        required={false}
        icon={`<svg class="h-5 w-5 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
        </svg>`}
      />

      <!-- Submit Button -->
      <button
        type="submit"
        id="submit-btn"
        class="w-full bg-gradient-to-r from-emerald-500 to-green-400 text-white font-bold py-5 px-8 rounded-2xl hover:from-emerald-600 hover:to-green-500 focus:outline-none focus:ring-4 focus:ring-emerald-300/50 transform transition-all duration-200 hover:scale-[1.02] active:scale-[0.98] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none shadow-2xl shadow-emerald-500/25 hover:shadow-emerald-500/40"
        data-submit-button
      >
        <span
          id="submit-text"
          class="flex items-center justify-center space-x-3"
        >
          <svg
            class="w-7 h-7"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7"
            ></path>
          </svg>
          <span class="text-lg">¬°Participar en el Sorteo!</span>
        </span>
      </button>
    </form>
  </div>

  <!-- Form Footer -->
  <div class="px-8 py-6 bg-slate-700/50 border-t border-emerald-500/20">
    <div class="text-center space-y-3">
      <p class="text-sm text-emerald-200">
        <span class="text-red-400">*</span> Campos obligatorios
      </p>
      <p
        class="text-sm text-emerald-300 flex items-center justify-center gap-2"
      >
        <svg
          class="w-4 h-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
          ></path>
        </svg>
        Tus datos est√°n 100% seguros y no ser√°n compartidos
      </p>
      <div
        class="flex items-center justify-center space-x-6 text-sm text-emerald-200"
      >
        <span class="flex items-center gap-1">
          <span class="w-2 h-2 bg-emerald-400 rounded-full"></span>
          Sorteo gratuito
        </span>
        <span class="flex items-center gap-1">
          <span class="w-2 h-2 bg-emerald-400 rounded-full"></span>
          Sin compras necesarias
        </span>
        <span class="flex items-center gap-1">
          <span class="w-2 h-2 bg-emerald-400 rounded-full"></span>
          Resultados transparentes
        </span>
      </div>
    </div>
  </div>
</div>

<Modal
  id="success-modal"
  type="success"
  title="üéâ ¬°Felicidades!"
  message="Te has registrado exitosamente al sorteo. ¬°Ya est√°s participando!"
  buttonText="¬°Genial!"
/>

<Modal
  id="error-modal"
  type="error"
  title="‚ùå Error en el Registro"
  message="Hubo un problema al procesar tu registro. Por favor, verifica tu conexi√≥n e int√©ntalo de nuevo."
  buttonText="Intentar de Nuevo"
/>

<Confetti />

<script>
  import type { ParticipantData, FormErrors } from "../types/participant";

  interface ConfettiAnimationClass {
    new (containerId?: string): {
      trigger(): void;
    };
  }

  declare global {
    interface Window {
      ConfettiAnimation?: ConfettiAnimationClass;
    }
  }

  class ParticipantFormManager {
    private form: HTMLFormElement;
    private submitButton: HTMLButtonElement;
    private submitText: HTMLElement;
    private loadingSpinner: HTMLElement;
    private confetti: { trigger(): void } | null = null;
    private readonly API_BASE_URL = "http://localhost:8000";

    constructor() {
      this.form = document.getElementById(
        "participant-form"
      ) as HTMLFormElement;
      this.submitButton = document.getElementById(
        "submit-btn"
      ) as HTMLButtonElement;
      this.submitText = document.getElementById("submit-text") as HTMLElement;
      this.loadingSpinner = document.getElementById(
        "loading-spinner"
      ) as HTMLElement;

      if (window.ConfettiAnimation) {
        this.confetti = new window.ConfettiAnimation();
      }

      this.init();
    }

    private init(): void {
      this.form.addEventListener("submit", this.handleSubmit.bind(this));
      this.setupRealtimeValidation();
      this.setupModalHandlers();
      this.updateParticipantsCount();
    }

    private async handleSubmit(event: Event): Promise<void> {
      event.preventDefault();

      const formData = this.getFormData();
      this.clearErrors();

      const errors = this.validateForm(formData);
      if (Object.keys(errors).length > 0) {
        this.showErrors(errors);
        return;
      }

      this.setSubmittingState(true);

      try {
        await this.submitToAPI(formData);
        this.showSuccess();
        this.form.reset();
        this.updateParticipantsCount();
      } catch (error) {
        console.error("Error submitting form:", error);
        let errorMessage =
          "Hubo un problema al procesar tu registro. Por favor, int√©ntalo de nuevo.";

        if (error instanceof Error) {
          if (
            error.message.includes("fetch") ||
            error.message.includes("NetworkError")
          ) {
            errorMessage =
              "No se pudo conectar con el servidor. Verifica tu conexi√≥n a internet.";
          } else if (
            error.message.includes("duplicate") ||
            error.message.includes("already exists")
          ) {
            errorMessage = "Este email ya est√° registrado en el sorteo.";
          } else {
            errorMessage = error.message;
          }
        }

        this.showError(errorMessage);
      } finally {
        this.setSubmittingState(false);
      }
    }

    private getFormData(): ParticipantData {
      const formData = new FormData(this.form);
      return {
        email: (formData.get("email") as string)?.trim().toLowerCase() || "",
        fullName: (formData.get("fullName") as string)?.trim() || "",
        phone: (formData.get("phone") as string)?.trim() || undefined,
      };
    }

    private validateForm(data: ParticipantData): FormErrors {
      const errors: FormErrors = {};

      if (!data.email) {
        errors.email = "El email es obligatorio";
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
        errors.email = "Por favor ingresa un email v√°lido";
      }

      if (!data.fullName) {
        errors.fullName = "El nombre completo es obligatorio";
      } else if (data.fullName.length < 2) {
        errors.fullName = "El nombre debe tener al menos 2 caracteres";
      } else if (data.fullName.length > 100) {
        errors.fullName = "El nombre no puede exceder 100 caracteres";
      }

      if (data.phone && data.phone.length > 0) {
        const cleanPhone = data.phone.replace(/[\s\-\(\)]/g, "");
        if (!/^\+?[\d]{9,15}$/.test(cleanPhone)) {
          errors.phone = "Por favor ingresa un tel√©fono v√°lido (9-15 d√≠gitos)";
        }
      }

      return errors;
    }

    private showErrors(errors: FormErrors): void {
      Object.entries(errors).forEach(([field, message]) => {
        const errorElement = document.getElementById(`${field}-error`);
        const inputElement = document.getElementById(field) as HTMLInputElement;

        if (errorElement && inputElement) {
          errorElement.textContent = message;
          errorElement.classList.remove("hidden");
          inputElement.classList.add("border-red-500", "focus:ring-red-500");
          inputElement.classList.remove(
            "border-slate-600",
            "focus:ring-emerald-500"
          );
        }
      });

      // Scroll to first error
      const firstError = document.querySelector('[id$="-error"]:not(.hidden)');
      if (firstError) {
        firstError.scrollIntoView({ behavior: "smooth", block: "center" });
      }
    }

    private clearErrors(): void {
      const errorElements = document.querySelectorAll('[id$="-error"]');
      const inputElements = document.querySelectorAll(
        "input[data-field]"
      ) as NodeListOf<HTMLInputElement>;

      errorElements.forEach((el) => {
        el.classList.add("hidden");
        el.textContent = "";
      });

      inputElements.forEach((input) => {
        input.classList.remove("border-red-500", "focus:ring-red-500");
        input.classList.add("border-slate-600", "focus:ring-emerald-500");
      });
    }

    private async submitToAPI(data: ParticipantData): Promise<void> {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout

      try {
        const response = await fetch(`${this.API_BASE_URL}/api/participants`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: JSON.stringify(data),
          signal: controller.signal,
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          let errorMessage = `Error ${response.status}: ${response.statusText}`;

          try {
            const errorData = await response.json();
            errorMessage = errorData.message || errorData.error || errorMessage;
          } catch {}

          throw new Error(errorMessage);
        }

        const result = await response.json();
        console.log("Registration successful:", result);
      } catch (error) {
        clearTimeout(timeoutId);

        if (error instanceof Error && error.name === "AbortError") {
          throw new Error(
            "La solicitud tom√≥ demasiado tiempo. Por favor, int√©ntalo de nuevo."
          );
        }

        throw error;
      }
    }

    private setSubmittingState(isSubmitting: boolean): void {
      this.submitButton.disabled = isSubmitting;

      if (isSubmitting) {
        this.submitText.innerHTML = `
          <svg class="animate-spin -ml-1 mr-3 h-7 w-7 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          <span class="text-lg">Registrando...</span>
        `;
      } else {
        this.submitText.innerHTML = `
          <svg class="w-7 h-7" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7"></path>
          </svg>
          <span class="text-lg">¬°Participar en el Sorteo!</span>
        `;
      }
    }

    private showSuccess(): void {
      if (this.confetti) {
        this.confetti.trigger();
      }

      // Retrasar el modal para que el confeti se vea primero
      setTimeout(() => {
        this.showModal("success-modal");
      }, 2000); // 2 segundos de retraso
    }

    private showError(message: string): void {
      const errorMessageEl = document.getElementById("error-modal-message");
      if (errorMessageEl) {
        errorMessageEl.textContent = message;
      }
      this.showModal("error-modal");
    }

    private showModal(modalId: string): void {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove("hidden");
        modal.classList.add("flex");
        document.body.style.overflow = "hidden";

        // Add animation
        requestAnimationFrame(() => {
          const modalContent = modal.querySelector(
            ".modal-content"
          ) as HTMLElement;
          if (modalContent) {
            modalContent.style.transform = "scale(1)";
          }
        });
      }
    }

    private hideModal(modalId: string): void {
      const modal = document.getElementById(modalId);
      if (modal) {
        const modalContent = modal.querySelector(
          ".modal-content"
        ) as HTMLElement;
        if (modalContent) {
          modalContent.style.transform = "scale(0.95)";
        }

        setTimeout(() => {
          modal.classList.add("hidden");
          modal.classList.remove("flex");
          document.body.style.overflow = "auto";
        }, 150);
      }
    }

    private setupModalHandlers(): void {
      // Close button handlers
      document.querySelectorAll("[data-close-modal]").forEach((button) => {
        button.addEventListener("click", (e) => {
          const modalId = (e.target as HTMLElement).getAttribute(
            "data-close-modal"
          );
          if (modalId) {
            this.hideModal(modalId);
          }
        });
      });

      // Click outside to close
      document.querySelectorAll("[data-modal]").forEach((modal) => {
        modal.addEventListener("click", (e) => {
          if (e.target === e.currentTarget) {
            this.hideModal(modal.id);
          }
        });
      });

      // Escape key to close
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape") {
          const openModal = document.querySelector("[data-modal].flex");
          if (openModal) {
            this.hideModal(openModal.id);
          }
        }
      });
    }

    private setupRealtimeValidation(): void {
      const emailInput = document.getElementById("email") as HTMLInputElement;
      const fullNameInput = document.getElementById(
        "fullName"
      ) as HTMLInputElement;
      const phoneInput = document.getElementById("phone") as HTMLInputElement;

      if (emailInput) {
        emailInput.addEventListener("input", () => {
          this.validateFieldRealtime(emailInput, /^[^\s@]+@[^\s@]+\.[^\s@]+$/);
        });

        emailInput.addEventListener("blur", () => {
          if (emailInput.value.trim()) {
            this.validateFieldRealtime(
              emailInput,
              /^[^\s@]+@[^\s@]+\.[^\s@]+$/
            );
          }
        });
      }

      if (fullNameInput) {
        fullNameInput.addEventListener("input", () => {
          this.validateFieldRealtime(fullNameInput, /.{2,}/);
        });
      }

      if (phoneInput) {
        phoneInput.addEventListener("input", () => {
          if (phoneInput.value.trim()) {
            const cleanPhone = phoneInput.value.replace(/[\s\-\(\)]/g, "");
            this.validateFieldRealtime(phoneInput, /^\+?[\d]{9,15}$/);
          } else {
            this.resetFieldValidation(phoneInput);
          }
        });
      }
    }

    private validateFieldRealtime(
      input: HTMLInputElement,
      pattern: RegExp
    ): void {
      const value =
        input.type === "tel"
          ? input.value.replace(/[\s\-\(\)]/g, "")
          : input.value.trim();

      if (input.value && !pattern.test(value)) {
        input.classList.add("border-red-500");
        input.classList.remove("border-slate-600", "border-emerald-500");
      } else if (input.value) {
        input.classList.add("border-emerald-500");
        input.classList.remove("border-slate-600", "border-red-500");
      } else {
        this.resetFieldValidation(input);
      }
    }

    private resetFieldValidation(input: HTMLInputElement): void {
      input.classList.remove("border-red-500", "border-emerald-500");
      input.classList.add("border-slate-600");
    }

    private updateParticipantsCount(): void {
      const countElement = document.getElementById("participants-count");
      if (countElement) {
        // Simulate increasing count
        const baseCount = 2847;
        const randomIncrease = Math.floor(Math.random() * 50) + 1;
        const newCount = baseCount + randomIncrease;

        countElement.textContent = `¬°√önete a m√°s de ${newCount.toLocaleString()} participantes registrados!`;
      }
    }

    // Public method to handle external API errors
    public handleApiError(error: Error): void {
      console.error("API Error:", error);
      this.setSubmittingState(false);

      let errorMessage = "Hubo un problema al procesar tu registro.";

      if (error.message.includes("Network")) {
        errorMessage =
          "Error de conexi√≥n. Verifica tu internet e int√©ntalo de nuevo.";
      } else if (error.message.includes("500")) {
        errorMessage = "Error del servidor. Por favor, int√©ntalo m√°s tarde.";
      } else if (error.message.includes("400")) {
        errorMessage =
          "Datos inv√°lidos. Verifica la informaci√≥n e int√©ntalo de nuevo.";
      }

      this.showError(errorMessage);
    }
  }

  // Initialize form when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    try {
      new ParticipantFormManager();
    } catch (error) {
      console.error("Error initializing form:", error);

      // Fallback error handling
      const submitBtn = document.getElementById("submit-btn");
      if (submitBtn) {
        submitBtn.addEventListener("click", (e) => {
          e.preventDefault();
          alert("Error al cargar el formulario. Por favor, recarga la p√°gina.");
        });
      }
    }
  });

  // Handle page visibility change to update participants count
  document.addEventListener("visibilitychange", () => {
    if (!document.hidden) {
      const form = document.getElementById("participant-form");
      if (form) {
        // Update count when user returns to page
        setTimeout(() => {
          const event = new CustomEvent("updateCount");
          form.dispatchEvent(event);
        }, 1000);
      }
    }
  });
</script>

---
export interface Props {
  id: string;
  name: string;
  type: "text" | "email" | "tel";
  label: string;
  placeholder: string;
  required?: boolean;
  icon: string;
  error?: string;
}

const {
  id,
  name,
  type,
  label,
  placeholder,
  required = false,
  icon,
  error,
} = Astro.props;
---

<div class="space-y-2">
  <label
    for={id}
    class="block text-sm font-bold text-emerald-200 tracking-wide"
  >
    {label}
    {required && <span class="text-red-400 ml-1">*</span>}
  </label>
  <div class="relative group">
    <input
      type={type}
      id={id}
      name={name}
      required={required}
      class="w-full px-4 py-3 pr-12 border-2 border-slate-600 bg-slate-700/50 rounded-xl focus:ring-2 focus:ring-emerald-400 focus:border-emerald-400 transition-all duration-300 outline-none hover:border-slate-500 peer text-white placeholder-slate-400 shadow-lg backdrop-blur-sm"
      placeholder={placeholder}
      data-field={name}
      autocomplete={type === "email"
        ? "email"
        : type === "tel"
          ? "tel"
          : "name"}
    />

    <!-- Icon container -->
    <div
      class="absolute inset-y-0 right-0 pr-4 flex items-center pointer-events-none"
    >
      <div class="transition-colors duration-200 peer-focus:text-emerald-400">
        <Fragment set:html={icon} />
      </div>
    </div>

    <!-- Success checkmark (hidden by default) -->
    <div
      class="absolute inset-y-0 right-12 pr-2 flex items-center pointer-events-none opacity-0 transition-opacity duration-200 success-icon"
      id={`${id}-success`}
    >
      <svg
        class="h-5 w-5 text-emerald-400"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M5 13l4 4L19 7"></path>
      </svg>
    </div>

    <!-- Focus indicator -->
    <div
      class="absolute inset-x-0 bottom-0 h-0.5 bg-gradient-to-r from-emerald-400 to-green-400 transform scale-x-0 transition-transform duration-200 peer-focus:scale-x-100 rounded-full"
    >
    </div>
  </div>

  <!-- Error message -->
  <div class="min-h-[1rem]">
    <p
      id={`${id}-error`}
      class="text-red-400 text-sm hidden transition-all duration-200 flex items-center space-x-2"
    >
      <svg
        class="h-4 w-4 flex-shrink-0"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
      <span></span>
    </p>
  </div>
</div>

<style>
  /* Enhanced validation styles for dark theme */
  .peer:invalid:not(:placeholder-shown) {
    border-color: rgb(248 113 113); /* red-400 */
    box-shadow: 0 0 0 1px rgb(248 113 113 / 0.2);
  }

  .peer:valid:not(:placeholder-shown) {
    border-color: rgb(52 211 153); /* emerald-400 */
    box-shadow: 0 0 0 1px rgb(52 211 153 / 0.2);
  }

  .peer:focus:invalid:not(:placeholder-shown) {
    border-color: rgb(248 113 113);
    box-shadow: 0 0 0 3px rgb(248 113 113 / 0.2);
  }

  .peer:focus:valid:not(:placeholder-shown) {
    border-color: rgb(52 211 153);
    box-shadow: 0 0 0 3px rgb(52 211 153 / 0.2);
  }

  /* Hover effects for dark theme */
  .group:hover .peer:not(:focus) {
    border-color: rgb(100 116 139); /* slate-500 */
    background-color: rgb(51 65 85 / 0.7); /* slate-700/70 */
  }

  /* Success state for validated fields */
  .peer.field-valid:not(:focus) {
    border-color: rgb(52 211 153); /* emerald-400 */
    background-color: rgb(6 78 59 / 0.3); /* emerald-900/30 */
  }

  .peer.field-valid:not(:focus) + div .success-icon {
    opacity: 1;
  }

  /* Error state */
  .peer.field-error {
    border-color: rgb(248 113 113); /* red-400 */
    background-color: rgb(127 29 29 / 0.3); /* red-900/30 */
  }

  /* Reset state - asegurar que los campos limpios no tengan estilos de validación */
  .peer:placeholder-shown {
    border-color: rgb(71 85 105); /* slate-600 */
    background-color: rgb(51 65 85 / 0.5); /* slate-700/50 */
  }

  /* Floating label effect (optional enhancement) */
  .peer:focus ~ .floating-label,
  .peer:not(:placeholder-shown) ~ .floating-label {
    transform: translateY(-1.75rem) scale(0.875);
    color: rgb(52 211 153); /* emerald-400 */
  }

  /* Input autofill styling for dark theme */
  .peer:-webkit-autofill,
  .peer:-webkit-autofill:hover,
  .peer:-webkit-autofill:focus {
    -webkit-box-shadow: 0 0 0 1000px rgb(51 65 85) inset !important; /* slate-700 */
    -webkit-text-fill-color: rgb(255 255 255) !important;
    transition: background-color 5000s ease-in-out 0s;
  }

  /* Phone number formatting */
  input[type="tel"] {
    font-variant-numeric: tabular-nums;
  }

  /* Smooth transitions for all states */
  .peer {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Glow effect on focus */
  .peer:focus {
    box-shadow:
      0 0 0 3px rgb(52 211 153 / 0.2),
      0 0 20px rgb(52 211 153 / 0.1);
  }

  /* Enhanced glass effect */
  .peer {
    backdrop-filter: blur(8px);
  }
</style>

<script>
  // Enhanced input validation and UX improvements
  document.addEventListener("DOMContentLoaded", () => {
    const inputs = document.querySelectorAll(
      "input[data-field]"
    ) as NodeListOf<HTMLInputElement>;

    inputs.forEach((input) => {
      const fieldName = input.getAttribute("data-field");
      const errorElement = document.getElementById(`${input.id}-error`);
      const successElement = document.getElementById(`${input.id}-success`);

      input.addEventListener("input", () => {
        validateField(input, errorElement, successElement);
      });

      input.addEventListener("blur", () => {
        if (input.value.trim()) {
          validateField(input, errorElement, successElement);
        }
      });

      input.addEventListener("focus", () => {
        // Add subtle animation on focus
        input.style.transform = "scale(1.01)";
      });

      input.addEventListener("blur", () => {
        // Remove animation on blur
        input.style.transform = "scale(1)";
      });

      // Mejorar el formateo de teléfono
      if (input.type === "tel") {
        input.addEventListener("input", (e) => {
          formatPhoneNumber(e.target as HTMLInputElement);
        });
      }

      if (input.type === "email") {
        input.addEventListener("blur", () => {
          suggestEmailDomain(input);
        });
      }

      // Listener para detectar cuando el formulario se resetea
      input.form?.addEventListener("reset", () => {
        setTimeout(() => {
          resetFieldToDefault(input, successElement);
        }, 0);
      });
    });
  });

  function resetFieldToDefault(
    input: HTMLInputElement,
    successElement: HTMLElement | null
  ): void {
    // Remover todas las clases de validación
    input.classList.remove(
      "field-valid",
      "field-error",
      "border-emerald-500",
      "border-red-500"
    );

    // Restaurar clases por defecto
    input.classList.add("border-slate-600");

    // Ocultar icono de éxito
    if (successElement) {
      successElement.style.opacity = "0";
    }
  }

  function validateField(
    input: HTMLInputElement,
    errorElement: HTMLElement | null,
    successElement: HTMLElement | null
  ): void {
    const value = input.value.trim();
    let isValid = false;

    switch (input.type) {
      case "email":
        isValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
        break;
      case "tel":
        const cleanPhone = value.replace(/[\s\-\(\)]/g, "");
        isValid = !value || /^\+?[\d]{9,15}$/.test(cleanPhone);
        break;
      case "text":
        isValid = value.length >= 2;
        break;
      default:
        isValid = value.length > 0;
    }

    // Update visual state
    input.classList.remove("field-valid", "field-error");

    if (value && isValid) {
      input.classList.add("field-valid");
      input.classList.remove("border-red-500");
      input.classList.add("border-emerald-500");
      if (successElement) {
        successElement.style.opacity = "1";
      }
    } else if (value && !isValid) {
      input.classList.add("field-error");
      input.classList.remove("border-emerald-500");
      input.classList.add("border-red-500");
      if (successElement) {
        successElement.style.opacity = "0";
      }
    } else {
      input.classList.remove("border-emerald-500", "border-red-500");
      input.classList.add("border-slate-600");
      if (successElement) {
        successElement.style.opacity = "0";
      }
    }
  }

  function formatPhoneNumber(input: HTMLInputElement): void {
    let value = input.value.replace(/\D/g, "");

    if (value.length > 15) {
      value = value.slice(0, 15);
    }

    if (value.length >= 10) {
      if (value.startsWith("51") && value.length === 11) {
        value = `+51 ${value.slice(2, 5)} ${value.slice(5, 8)} ${value.slice(8)}`;
      } else if (value.length === 9) {
        value = `${value.slice(0, 3)} ${value.slice(3, 6)} ${value.slice(6)}`;
      }
    }

    input.value = value;
  }

  function suggestEmailDomain(input: HTMLInputElement): void {
    const value = input.value.trim();
    const commonDomains = [
      "gmail.com",
      "hotmail.com",
      "yahoo.com",
      "outlook.com",
    ];

    if (value.includes("@") && !value.includes(".")) {
      const [localPart, domain] = value.split("@");
      const suggestions = commonDomains.filter((d) =>
        d.startsWith(domain.toLowerCase())
      );

      if (suggestions.length > 0) {
        // You could show a suggestion dropdown here
        console.log(`Did you mean: ${localPart}@${suggestions[0]}?`);
      }
    }
  }
</script>

---
export interface Props {
  id: string;
  type: "success" | "error";
  title: string;
  message?: string;
  buttonText: string;
}

const { id, type, title, message, buttonText } = Astro.props;

const iconColor = type === "success" ? "text-emerald-400" : "text-red-400";
const bgColor = type === "success" ? "bg-emerald-900/30" : "bg-red-900/30";
const buttonColor =
  type === "success"
    ? "bg-gradient-to-r from-emerald-500 to-green-400 hover:from-emerald-600 hover:to-green-500 shadow-emerald-500/25"
    : "bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 shadow-red-500/25";

const successIcon = `
  <svg class="w-10 h-10 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
  </svg>
`;

const errorIcon = `
  <svg class="w-10 h-10 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
  </svg>
`;
---

<div
  id={id}
  class="fixed inset-0 bg-black/70 backdrop-blur-sm z-30 hidden items-center justify-center p-4 transition-all duration-300"
  data-modal
>
  <div
    class="bg-slate-800/95 backdrop-blur-xl rounded-3xl max-w-md w-full mx-4 overflow-hidden transform transition-all duration-300 scale-95 modal-content border border-slate-600/50 shadow-2xl"
  >
    <div class="p-8 text-center">
      <div
        class={`w-20 h-20 mx-auto mb-6 ${bgColor} rounded-full flex items-center justify-center border border-slate-600/30`}
      >
        <Fragment set:html={type === "success" ? successIcon : errorIcon} />
      </div>
      <h3 class="text-2xl font-bold text-white mb-4">{title}</h3>
      <p
        id={`${id}-message`}
        class="text-slate-300 mb-8 text-lg leading-relaxed"
      >
        {message || ""}
      </p>
      <button
        id={`close-${id}`}
        class={`w-full ${buttonColor} text-white font-semibold py-4 px-6 rounded-2xl transition-all duration-200 shadow-xl hover:scale-[1.02] active:scale-[0.98]`}
        data-close-modal={id}
      >
        {buttonText}
      </button>
    </div>
  </div>
</div>

<style>
  [data-modal].flex .modal-content {
    @apply scale-100;
  }

  /* Enhanced backdrop blur for better visual separation */
  [data-modal] {
    backdrop-filter: blur(8px);
  }

  /* Subtle animation for the modal content */
  .modal-content {
    animation: modalSlideIn 0.3s ease-out;
  }

  @keyframes modalSlideIn {
    from {
      opacity: 0;
      transform: scale(0.9) translateY(-20px);
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  /* Button hover effects */
  [data-close-modal]:hover {
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
  }
</style>
